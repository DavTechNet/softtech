
/*!
 * \file ./IHM/mainwindow.cpp
 * \brief Fenetre principale du programme
 * \author Florian Davin
 * \version 0.1
 */

#include "mainwindow.h"
#include "ui_mainwindow.h"

/*!
 *  \brief Constructeur
 *
 */
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    // Initialisation de l'interface graphique et des interactions
    ui->setupUi(this);
    connexionSlot();

    // Presences des parametres de la base de données
    if (!DatabaseInfos::ParameterExist())
    {
        SettingsDialog settingsDialog(this);
        if (settingsDialog.exec() == QDialog::Accepted)
            // Sauvegarde des paramètres
            if (!settingsDialog.SaveParameters())
                qDebug () << "Enregistrement non valide";
    }
    // On reteste la présence des parametres apres le passage dans les options
    if (DatabaseInfos::ParameterExist())
    {
        // Creation des tables pour la sauvegarde
        tableSoft = new QSqlTableModel();
        tableLoan = new QSqlTableModel();

        ui->tableView_listSoft->verticalHeader()->setResizeMode(QHeaderView::Fixed);
        ui->tableView_listSoft->horizontalHeader()->setResizeMode(QHeaderView::Fixed);
        ui->lineEdit_prix->setValidator(new QDoubleValidator(this));
        LoadDatabase();
    }
}

/*!
 *  \brief Desctructeur
 *
 */
MainWindow::~MainWindow()
{

    // Annulation des modifications et fermeture de la connexion a la bdd
    tableLoan->revertAll();
    tableSoft->revertAll();
    QSqlDatabase::database().close();
    qDebug() << "Fermeture OK";//*/
    delete ui;
}


void MainWindow::LoadDatabase()
{
    // Recuperation des informations de connexion a la base de données
    QSqlDatabase db(DatabaseInfos::SettingsInformations());

    if (!db.open())
        QMessageBox::critical(0, tr("Erreur base de données"), tr("Une erreur c'est produite durant la tentative d'accès à la base de données, veuillez vérifier les informations."));
    else
        qDebug () << "Ouverture OK";

    // Met a jour la liste des logiciels et de la taille des colonnes
    ui->tableView_listSoft->verticalHeader()->setResizeMode(QHeaderView::Fixed);
    ui->tableView_listSoft->horizontalHeader()->setResizeMode(QHeaderView::Fixed);
    ui->comboBox_emprunteur->setModel(Database::ReadBorrower());
    UpdateListSoft();
    ui->comboBox_emprunteur->setCurrentIndex(-1);
}

void MainWindow::UpdateListSoft()
{
	ui->tableView_listSoft->setModel(Database::RWTableSoft());
    ui->tableView_listSoft->hideColumn(2);
    ui->tableView_listSoft->hideColumn(3);
    ui->tableView_listSoft->hideColumn(4);
    ui->tableView_listSoft->hideColumn(5);
    ui->tableView_listSoft->hideColumn(6);
    ui->tableView_listSoft->hideColumn(7);
    ui->tableView_listSoft->hideColumn(8);
    ui->tableView_listSoft->hideColumn(9);
    // Selection d'un logiciel de la liste (ne pas deplacer ce connect)
    connect(ui->tableView_listSoft->selectionModel(), SIGNAL(selectionChanged(const QItemSelection&, const QItemSelection&)),
            this, SLOT(slot_selectionChanged(QItemSelection,QItemSelection)));
}

/*!
 *  \brief Creation des differentes interactions
 *
 *  Methode creant les interactions entre les
 *  differents elements de la fenetre
 *
 */
void MainWindow::connexionSlot()
{
    // Efface le champs de recherche
    connect(ui->toolButton_clearSearch, SIGNAL(clicked()),
            ui->lineEdit_search, SLOT(clear()));

    // Gestion des boutons pour quitter
    connect(ui->toolButton_quit, SIGNAL(clicked()),
            this, SLOT(close()));

    // Recherche d'un logiciel dans la base de données
    connect(ui->lineEdit_search, SIGNAL(textChanged(QString)),
            this, SLOT(SearchInDatabase(QString)));
    connect(ui->comboBox_search, SIGNAL(currentIndexChanged(int)),
            this, SLOT(SearchChanged(int)));

    // Bouton pour ajouter un logiciel
    connect(ui->toolButton_AddSoft, SIGNAL(clicked()),
            this, SLOT(AddSoft()));

    // Choix de la presence d'un numero de série
    connect(ui->comboBox_serial, SIGNAL(currentIndexChanged(int)),
            this, SLOT(SerialPresence(int)));

    // Importation et exportation
    connect(ui->action_Exporter, SIGNAL(triggered()),
            this, SLOT(ExportDatabase()));
    connect(ui->action_Importer, SIGNAL(triggered()),
            this, SLOT(ImportDatabase()));

    // Fenetre des options
    connect(ui->toolButton_option, SIGNAL(clicked()),
            this, SLOT(OpenSettings()));

    // Marque le nom et l'editeur dans le second onglet
    connect(ui->lineEdit_nom, SIGNAL(textChanged(QString)),
            ui->lineEdit_entry_nom, SLOT(setText(QString)));
    connect(ui->lineEdit_editeur, SIGNAL(textChanged(QString)),
            ui->lineEdit_entry_editeur, SLOT(setText(QString)));

    // Bouton de sauvegarde et annulation et suppression
    connect(ui->toolButton_save, SIGNAL(clicked()),
            this, SLOT(SaveDbChange()));
    connect(ui->toolButton_cancel, SIGNAL(clicked()),
            this, SLOT(CancelDbChange()));
    connect(ui->toolButton_suppr, SIGNAL(clicked()),
            this, SLOT(DeleteSoft()));

    // Affichage des prêts
    connect(ui->toolButton_emprunt, SIGNAL(clicked()),
            this, SLOT(ShowLoan()));
}

/*!
 *  \brief Fermeture de l'application
 *
 *  Methode correspondant à la fermeture du programme
 *
 */
void MainWindow::closeEvent(QCloseEvent *event)
{
    if (QMessageBox::Yes == QMessageBox::information(0, tr("Fermeture de l'application"),
            tr("Etes-vous certain de vouloir quitter l'application?"), QMessageBox::Yes, QMessageBox::No))
        event->accept();
    else
        event->ignore();
}

/*!
 *  \brief Recherche
 *
 *  Methode à la recherche dans la base de données
 *  d'un éditeur ou logiciel
 *
 *  /param searchText: Texte recherché dans la base de données
 */
void MainWindow::SearchInDatabase(QString searchText)
{
    QString search;
    if (ui->comboBox_search->currentIndex() == 0) //nom du logiciel
        search = "title";
    else if (ui->comboBox_search->currentIndex() == 1)  // Editeur
        search = "editor";
    ui->tableView_listSoft->setModel(Database::SearchTableSoft(search, searchText));
    connect(ui->tableView_listSoft->selectionModel(), SIGNAL(selectionChanged(const QItemSelection&, const QItemSelection&)),
            this, SLOT(slot_selectionChanged(QItemSelection,QItemSelection)));
}

/*!
 *  \brief Recherche
 *
 *  Methode actualisant la recherche en fonction de l'information voulue
 *
 *  /param index: index correspondant au changement d'information
 */
void MainWindow::SearchChanged(int index)
{
    SearchInDatabase(ui->lineEdit_search->text());
}

/*!
 *  \brief Changement de logiciel séléctionné
 *
 *  Methode actualisant l'affichage en fonction du logiciel séléctionné
 *
 *  /param selected: nouvel item selectionné
 *  /param deselected: ancien parametre selectionné
 */
void MainWindow::slot_selectionChanged (const QItemSelection  &selected, const QItemSelection  &deselected )
{
    // Recuperation des informations du logiciel
    int row = ui->tableView_listSoft->currentIndex().row();
    QString title  = ui->tableView_listSoft->model()->index(row, 0).data().toString();
    QString editor = ui->tableView_listSoft->model()->index(row, 1).data().toString();
    QSqlQueryModel *model = Database::SelectionSoft(title, editor);

    // Actualisation de l'affichage
    ui->lineEdit_nom->setText           (model->index(0,0).data().toString());
    ui->lineEdit_entry_nom->setText     (model->index(0,0).data().toString());
    ui->lineEdit_editeur->setText       (model->index(0,1).data().toString());
    ui->lineEdit_entry_editeur->setText (model->index(0,1).data().toString());
    ui->comboBox_serial->setCurrentIndex(model->index(0,2).data().toInt());
    ui->textEdit_serial->setPlainText   (model->index(0,3).data().toString());
    ui->comboBox_cat->setCurrentIndex   (model->index(0,4).data().toInt());
    ui->lineEdit_entry_date->setText    (model->index(0,5).data().toString());
    ui->lineEdit_out_date->setText      (model->index(0,6).data().toString());
    ui->lineEdit_emprunt_date->setText  (model->index(0,6).data().toString());
    ui->comboBox_emprunteur->setCurrentIndex(ui->comboBox_emprunteur->findText(model->index(0,7).data().toString(), Qt::MatchExactly | Qt::MatchCaseSensitive));
    ui->lineEdit_prix->setText          (model->index(0,8).data().toString());
    int selectedSoftId  =               model->index(0,9).data().toInt();

    // En cas de pret
    if (!ui->lineEdit_emprunt_date->text().isEmpty())
    {
        LoanInTime(true);

        /*query.prepare("SELECT * FROM emprunts WHERE id_logiciel=:id_logiciel");
        query.bindValue(":id_logiciel", selectedSoftId);
        query.exec();
        while (query.next())
        {
            if (query.isNull(3))
                selectedPretId = query.value(0).toInt();
        }//*/
    } else
        LoanInTime(false);
}

/*!
 *  \brief Choix de la présence d'un numero de série
 *
 *  Methode permettant d'activer ou désactiver la possibilié
 *  d'entrer un numero de série
 *
 *  /param index: index du choix de la combobox
 */
void MainWindow::SerialPresence(int index)
{
    if (index == 0)
        ui->textEdit_serial->setEnabled(false);
    else if (index == 1)
        ui->textEdit_serial->setEnabled(true);
}

/*!
 *  \brief Gestion de l'affichage pour les informations de pret
 *
 *  Methode activant ou desactivant l'affichage par rapport aux prets
 *
 *  /param state: etat voulu
 */
void MainWindow::LoanInTime(bool state)
{
    ui->pushButton_restituer->setEnabled(state);
    ui->comboBox_emprunteur->setEnabled(state);
    ui->pushButton_preter->setEnabled(!state);
    ui->lineEdit_emprunt_date->setEnabled(state);
    ui->lineEdit_date_retour->setEnabled(state);
}

/*!
 *  \brief Ajout d'un nouveau logiciel
 *
 *  Methode permettant d'ajouter un nouveau logiciel
 *
 */
void MainWindow::AddSoft()
{
    AddDialog addDialog(this);
    if (addDialog.exec() == QDialog::Accepted)
    {
        // Récupération des informations
        ui->lineEdit_nom->setText(addDialog.getName());
        ui->lineEdit_editeur->setText(addDialog.getEditor());
        ui->comboBox_serial->setCurrentIndex(ui->comboBox_serial->findText(addDialog.getSerialReq()));
        ui->textEdit_serial->setText(addDialog.getSerialList());
        ui->comboBox_cat->setCurrentIndex(ui->comboBox_cat->findText(addDialog.getCategory()));
        ui->lineEdit_prix->setText(addDialog.getPrice());
        QDate date = QDate::currentDate();
        ui->lineEdit_entry_date->setText(date.toString("dd/MM/yyyy"));

        // Ajout à la base de données, le bouton Save valide l'ajout
        // Recuperation de la table
        tableSoft = Database::RWTableSoft();
        tableLoan = Database::RWTableLoan();
        tableSoft->setEditStrategy(QSqlTableModel::OnManualSubmit);
        tableLoan->setEditStrategy(QSqlTableModel::OnManualSubmit);

        // Ajout des informations
        QSqlRecord record = tableSoft->record();
        record.setValue(tableSoft->headerData(0, Qt::Horizontal).toString(), ui->lineEdit_nom->text());
        record.setValue(tableSoft->headerData(1, Qt::Horizontal).toString(), ui->lineEdit_editeur->text());
        record.setValue(tableSoft->headerData(2, Qt::Horizontal).toString(), ui->comboBox_serial->currentText());
        record.setValue(tableSoft->headerData(3, Qt::Horizontal).toString(), ui->textEdit_serial->toPlainText());
        record.setValue(tableSoft->headerData(4, Qt::Horizontal).toString(), ui->comboBox_cat->currentText());
        record.setValue(tableSoft->headerData(5, Qt::Horizontal).toString(), ui->lineEdit_entry_date->text());
        record.setValue(tableSoft->headerData(6, Qt::Horizontal).toString(), ui->lineEdit_out_date->text());
        record.setValue(tableSoft->headerData(7, Qt::Horizontal).toString(), ui->comboBox_emprunteur->currentText());
        record.setValue(tableSoft->headerData(8, Qt::Horizontal).toString(), ui->lineEdit_prix->text());
        tableSoft->insertRecord(-1, record);
        ChangeButtonsStatus(false);
    }
}

void MainWindow::OpenSettings()
{
    SettingsDialog settingsDialog(this);
    if (settingsDialog.exec() == QDialog::Accepted)
    {
        if (!settingsDialog.SaveParameters())
            qDebug () << "Enregistrement non valide";
        LoadDatabase();
    }
}

void MainWindow::ExportDatabase()
{
    ExportDialog exportDialog(this);
    if (exportDialog.exec() == QDialog::Accepted)
        exportDialog.exportData();
}

void MainWindow::ImportDatabase()
{
    ImportDialog importDialog(this);
    if (importDialog.exec() == QDialog::Accepted)
    {
        importDialog.ImportData();
        UpdateListSoft();
    }
}

void MainWindow::SaveDbChange()
{
    tableSoft->submitAll();
    tableLoan->submitAll();
    QSqlDatabase::database().commit();
    ChangeButtonsStatus(true);
}

void MainWindow::CancelDbChange()
{
    tableSoft->revertAll();
    tableLoan->revertAll();
    ChangeButtonsStatus(true);
}

void MainWindow::ChangeButtonsStatus(bool state)
{
    ui->toolButton_AddSoft->setEnabled(state);
    ui->toolButton_save->setEnabled(!state);
    ui->toolButton_cancel->setEnabled(!state);
    ui->toolButton_emprunt->setEnabled(state);
    ui->toolButton_option->setEnabled(state);
    ui->toolButton_print->setEnabled(state);
    ui->toolButton_quit->setEnabled(state);
    ui->toolButton_suppr->setEnabled(state);
}

void MainWindow::ShowLoan()
{
    LoanDialog loanDialog(this);
    loanDialog.exec();
}

void MainWindow::DeleteSoft()
{
    qDebug() << ui->tableView_listSoft->currentIndex().row();

    // Recuperation de la table
    tableSoft = Database::RWTableSoft();
    tableLoan = Database::RWTableLoan();
    tableSoft->setEditStrategy(QSqlTableModel::OnManualSubmit);
    tableLoan->setEditStrategy(QSqlTableModel::OnManualSubmit);

    int id_soft =
    tableSoft->removeRow(ui->tableView_listSoft->currentIndex().row());
}
